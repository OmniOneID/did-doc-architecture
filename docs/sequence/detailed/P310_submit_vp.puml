@startuml P310_submit_vp
'- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
' Settings
'- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
'=== Header and Footer ===
header OPEN-DID Technical Specification
footer
  	Page %page% of %lastpage% at %date("yyyy-MM-dd hh:mm:ss")
end footer

'=== Title ===
title
	<size:25>P310 : VP Submission </size>
end title

'=== Options ===
' Auto numbering: ex) "<b>000." => Display as 3-digit number with leading zeros
autonumber "<b>(#)</b>"
' Hide participant box at bottom of page
'hide footbox

'=== Participants ===
skinparam ParticipantPadding 20
skinparam BoxPadding 20
skinparam MaxMessageSize 500
skinparam MinClassWidth 80

box Mobile #OldLace
    participant "**Wallet**" as WALLET <<Wallet>> #WhiteSmoke
    participant "**CA App**" as CA <<App>> #WhiteSmoke    
end box

box Verification Server #AliceBlue
    participant "**Verifier**" as SP <<WAS>> #WhiteSmoke
end box

box Trust Repository
    participant "**blockchain**" as BC <<Storage>> #WhiteSmoke
end box 

'- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
' Constants
'- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

!$refdoc = "Refer to separate document"
!$doc = "Refer to data specification"

'- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
' Content
'- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
|||

== Offer Request  ==

rnote across #white    
    The Offer stage does not define standard APIs, only payload data formats are specified.
    How to deliver the Offer is outside the scope of this document.
end note

== P310-1 : Profile Request ==
activate CA

CA -> SP++ : Profile Request
rnote right of CA #Lavender
    **[M310_Req : Profile Request]**    
    body : 
        messageId
        offerId
        txId (optional)
end note

SP -> SP : Validate offerId

SP -> SP : Retrieve transaction and VpOffer
SP -> SP : Prepare profile-related data\
            \n* verifierNonce = Generate nonce for submission\
            \n* (ReqE2e) reqE2e = Create E2E request information\
            \n* keyPair = Generate E2E key pair\
            \n* sessionKey = Store private key

SP <-> BC : Retrieve / Respond Verifier DID Doc

rnote right of SP #MintCream    
    **DidDoc** : $doc
end note

SP -> SP : Generate / Sign Verify Profile
rnote right of SP #MintCream    
    **VerifyProfile** : $doc
end note

SP -> SP : Store E2E information and VpProfile

return
rnote right of CA #Lavender
    **[M310_Res : Profile Response]**
    body : 
        verifyProfile
        txId
end note

== Profile Verification ==

CA <-> BC : Retrieve / Respond Verifier DID Doc

rnote right of CA #MintCream    
    **DidDoc** : $doc
end note

CA -> CA : Verify VerifyProfile signature
rnote right of CA #MintCream    
    **VerifyProfile** : $doc
end note

CA -> CA : Check user submission information

== Wallet Token Generation ==

rnote over WALLET, CA #white
    Wallet Token Generation : CA App -> Wallet
end note

== VP Generation ==

CA -> WALLET++ : VP Generation Request \n{VerifyProfile, \nUser-selected submission information}
WALLET -> WALLET : Generate VP (VP)
rnote right of WALLET #MintCream    
    **VP** : $refdoc
end note

WALLET -> WALLET : User authentication
WALLET -> WALLET : Generate VP signature \n(VpProof)
rnote right of WALLET #MintCream    
    **VpProof** : $doc
end note

WALLET -> WALLET : Generate temporary key pair \nCreate session key
WALLET -> WALLET : Encrypt VP \n(encVp)
rnote right of WALLET #MintCream    
    encVp = multibase(enc(iv, VP, seskey))

    * IV application may vary based on KDF method
end note

WALLET -> WALLET : Generate AccE2e \n(AccE2e)
rnote right of WALLET #MintCream    
    **AccE2e** : $doc
    - publicKey, iv
    - proof (optional)
end note

return VP Generation Request Response \n{AccE2e, encVp}

== P310-2 : VP Submission and Verification ==

CA -> SP++ : VP Verification Request
rnote right of CA #Lavender
    **[M310_Req : VP Submission]**    
    body : 
        messageId
        txId
        accE2e
        encVp
end note

SP -> SP : Retrieve transaction code
SP -> SP : Validate transaction and status
SP -> SP : Perform E2E ECDH\
        \n* Verify accE2e.proof if present\
        \n* e2eKey = Generate encryption key\
        \n* iv = accE2e.iv
        
SP -> SP : Decrypt VP\
        \n* vp = decrypt(encVp, e2eKey, iv)

SP -> SP : Check verifierNonce consistency
SP -> SP : Check AuthType / nonce consistency

SP <-> BC : Retrieve Holder / Issuer DID Doc
rnote right of SP #MintCream    
    **DidDoc** : $doc
end note

SP -> SP : Verify VP signature\
        \n* Verify vp.proof\
        \n* Validate VC lifecycle\
        \n* Verify issuer signature within VC

SP -> SP : Store VP data and complete transaction
        
return
rnote right of CA #Lavender
    **[M310_Res : VP Verification Response]**      
        body : 
            txId        
end note

|||
|||
@enduml