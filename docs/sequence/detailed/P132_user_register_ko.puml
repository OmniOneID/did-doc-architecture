@startuml P131_user_register_ko

'- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
' 설정
'- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
'=== Header and Footer ===
header OPEN-DID 기술 규격
footer
  	Page %page% of %lastpage% at %date("yyyy-MM-dd hh:mm:ss")
end footer

'=== 제목 ===
title
	<size:25>P132 : 사용자 등록</size>
end title

'=== 옵션 ===
autonumber "<b>(#)</b>"

'=== Panticipants ===
skinparam ParticipantPadding 20
skinparam BoxPadding 20
skinparam MaxMessageSize 500
skinparam MinClassWidth 80

actor "**사용자**" as USER

box 모바일 #OldLace
    participant "**월렛**" as WALLET <<Wallet>> #WhiteSmoke
    participant "**인가앱**" as CA <<App>> #WhiteSmoke    
end box

box 인가앱 사업자 #AliceBlue
    participant "**CAS**" as CAS <<WAS>> #WhiteSmoke
end box

box TAS 사업자 #AliceBlue
    participant "**TAS**" as TAS <<WAS>> #WhiteSmoke
end box

box 신뢰저장소
    participant "**blockchain**" as BC <<Storage>> #WhiteSmoke
end box 

'- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
' 상수
'- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
!$refdoc = "별도 문서 참조"
!$doc = "데이터명세 문서 참조"

'- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
' 내용
'- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
|||

== P132-1: 사용자 등록 시작 요청 ==
CA -> TAS++: 사용자 등록 시작 요청
rnote right of CA #Lavender        
    **[M132_REQ: 사용자 등록 시작 요청]**
    body : 
        messageId
end note

return 사용자 등록 시작 응답
rnote right of CA #Lavender        
    **[M132_RES: 사용자 등록 시작 응답]**
    body : 
        txId
end note

|||
== P132-2: ECDH 요청  ==
CA -> WALLET: holder DID 조회

return {Holder DID}
CA -> CA: Client Nonce 생성
CA -> CA: 임시키쌍 생성
CA -> CA: ECDH 데이터 준비\
            \n* (ReqEcdh)reqEcdh\
            \n   = ECDH 요청 생성

rnote right of CA #MintCream
    **ReqEcdh** : $doc
    client|clientNonce|curve|publicKey|candidate
end note

opt KeyAgreement 서명 ON
    CA -> WALLET ++: KeyAgreement 서명 요청\n{reqEcdh}
        WALLET -> WALLET: signKeyAgree(reqEcdh)
        note right
            실제 호출 시
            * 인가앱은 원문의 해시와 keyId를 전달
            * 월렛은 서명값만 응답
        end note
    return {reqEcdh}
    rnote right of WALLET #MintCream
        **signedReqEcdh** : $doc
        client|clientNonce|curve|publicKey|candidate|Proof
        Proof = KeyAgreeProof
    end note
end



CA -> TAS++ : ECDH 요청
rnote right of CA #Lavender
    **[M132_REQ : ECDH 요청]**
    body : 
        messageId
        txId
        reqEcdh
end note

    opt KeyAgreement 서명 ON
        TAS -> TAS: reqEcdh.proof 서명 검증
    end

    TAS -> TAS : reqEcdh 정합성 확인
    TAS -> TAS : Server Nonce 생성
    TAS -> TAS : mergedNonce 생성
    rnote right of TAS #MintCream
        **mergedNonce**
        sha256(serverNonce, clientNonce)
    end note
    TAS -> TAS: 임시키쌍 생성

    TAS -> TAS: ECDH 수행\
                \n* sesKey = 세션키\

    rnote right of TAS #MintCream
        **sesKey**
        ecies(serverPriKey|clientPubKey|mergedNonce|cipherAlg)
    end note
    TAS -> TAS: ECDH 수락 데이터 생성\
                \n* (AccEcdh)accEcdh
    rnote right of TAS #MintCream
        **accEcdh** : $doc
        server|serverNonce|cipher|publicKey|padding
    end note
    opt KeyAgreement 서명  ON
        TAS -> TAS: signKeyAgree(accEcdh)
    end

return ECDH 응답
rnote right of CA #Lavender
    **[M132_RES : ECDH 응답]**
    body : 
        txId
        accEcdh
end note

opt KeyAgreement 서명  ON
    CA -> CA: accEcdh.proof 서명 검증
end
CA -> CA : accEcdh 정합성 확인
CA -> CA : mergedNonce 생성
rnote right of CA #MintCream
    **mergedNonce**
    sha256(serverNonce, clientNonce)
end note
CA -> CA: ECDH 수행\n* sesKey = 세션키

rnote right of CA #MintCream
    **sesKey**
    ecies(clientPriKey|serverPubKey|mergedNonce|cipherAlg)
end note

|||
== P132-3: 서버토큰 생성 요청  ==
hnote over CA, WALLET #LimeGreen
    * purpose = "CreateDid"
    * (SignedWalletInfo)walletInfo = 월렛정보 생성
    * walletToken = 월렛토큰
end hnote
== 월렛 토큰 생성 ==

activate CA

CA -> WALLET++ : walletTokenSeed 생성 요청 {purpose, pkgname, userId}
    WALLET -> WALLET : nonce 생성
    WALLET -> WALLET : walletTokenSeed 생성, 유효시간
return {walletTokenSeed}
rnote right of WALLET #MintCream
    **walletTokenSeed** : $doc
    walletTokenSeed = 
        (nonce | vaildUntil | purpose | pkgname | userId)
end note

CA -> CAS : WalletTokenData요청 {walletTokenSeed}
CAS-> CAS : WalletTokenData 생성
CAS -> CA : WalletTokenData 전달 
rnote right of CA #MintCream
    **WalletTokenData** : $doc
    seed|sha_pii|provider|nonce|Proof
    Proof = sign(seed|sha_pii|provider|nonce|, CAS_PriKey)

    CAS : 인가앱사업자 (인가앱서버)
end note

CA -> WALLET++ : WalletToken 생성 요청 \n{WalletTokenData}
    WALLET -> BC++ : CAS DID Doc 조회
    rnote right of WALLET #LightGray
        **[API_REQ : DID Doc 조회 요청]**
        did
    end note

    return
    rnote right of WALLET #LightGray
        **[API_RES : DID Doc 조회 응답]**
        DidDoc
    end note
    rnote right of WALLET #MintCream    
        **DidDoc** : $refdoc
    end note

    WALLET -> WALLET : 서명 검증
    WALLET -> WALLET : resultNonce 생성 (resultNonce)

    WALLET -> WALLET : 월렛토큰 생성 {walletToken}
    rnote right of WALLET #MintCream
        **hWalletToken**
        hWalletToken =
            sha256(WalletTokenData | resultNonce)
    end note

    return {resultNonce}
    note right of WALLET : resultNonce 전달 적용

    CA -> CA : 월렛토큰 생성 {hWalletToken}
    rnote right of CA #MintCream
        **hWalletToken**
        hWalletToken = 
            sha256(ObjWalletTokenData | resultNonce)
    end note

== 서명된 월렛 정보 요청  ==
CA -> WALLET ++ : 서명된 Wallet 정보 요청 {walletToken}
    WALLET -> WALLET: nonce 생성
    WALLET -> WALLET: Wallet 정보 서명\
                \n* (SignedWalletInfo)walletInfo= {\
                \n      walletId,\
                \n      did,\
                \n      nonce,\
                \n      proof\
                \n      }
return {walletInfo}

|||
== 서명된 앱 정보 요청  ==
rnote across #white
    인가앱은 로그인 또는 유사한 과정을 통해 인가앱 서버와 이미 세션을 맺고 있어야 한다.
    그러나 이 과정의 구체적인 내용은 본 규격에서 다루지 않는다.
end note
CA -> CAS ++ : 서명된 앱 정보 요청
rnote right of CA #LightGray        
    **[API_REQ : 서명된 앱 정보 요청]**
    query:
        appId
end note
    CAS -> CAS : nonce 생성
    CAS -> CAS : 앱 정보 서명\
            \n* (AttestedAppInfo)caAppInfo= {\
            \n      appId,\
            \n      provider,\
            \n      nonce,\
            \n      proof\
            \n      }
return 서명된 앱 정보 응답{caAppInfo}
rnote right of CA #LightGray        
    **[API_REQ : 서명된 앱 정보 응답]**
    body:
        attestedAppInfo
end note

|||
== 서버토큰 데이터 생성 요청  ==
CA -> CA: 서버토큰시드 생성\
        \n* (ServerTokenSeed)seed = {\
        \n     purpose = "CreateDid",\
        \n     walletInfo,\
        \n     caAppInfo\
        \n  }

    CA -> TAS++ : 서버토큰 요청
    rnote right of CA #LightGray        
        **[API_REQ : 서버토큰 요청]**
        body:
            messageId,
            txId,
            seed
    end note

    TAS -> TAS: 서명 검증\
            \n* 월렛서명 검증\
            \n* 인증앱 사업자 서명 검증

    TAS -> TAS: seed에서 정보 추출\
            \n* appId = 인가앱 식별자\
            \n* walletId = 월렛 식별자\
            \n* walletDid = 월렛 DID\
            \n* walletProviderDid = 월렛 사업자 DID

    TAS -> TAS: 등록된 월렛정보와 일치여부 확인

    TAS -> TAS: 서버토큰 생성 및 저장\
            \n* (ServerTokenData)std 생성\
            \n* serverToken = sha256(std)

    TAS -> TAS: 응답정보 암호화\
            \n* iv = IV 생성\
            \n* tmp = enc(std, sesKey, iv)\
            \n* encStd = multibase(tmp)

return 서버토큰 응답
rnote right of CA #LightGray        
    **[API_REQ : 서버토큰 응답]**
    body:
        txId,
        iv,
        encStd
end note

|||
== 서버토큰 생성  ==
CA -> CA: encStd 복호화\
    \n encStd = decodeMultibase(encStd)\
    \n mergedNonce = clientNonce|serverNonce\
    \n secretKey = { priKey<sub>CA</sub> | pubKey<sub>TAS</sub>}\
    \n sharedSecret = dec(secretKey, mergedNonce)\
    \n* std = dec(encStd, sharedSecret, iv) 

CA -> CA: 서버토큰 계산\
    \n hServerToken = sha256(std)

|||
== 사용자 KYC  ==
rnote across #white
    사용자가 KYC를 수행한 후, PII(Personally Identifiable Information)와 같은 식별자를 등록해야 함.
    이 과정은 본 규격에서 다루지 않음. 
end note

|||
== P132-4: 사용자 등록 요청  ==

CA -> WALLET ++: 사용자 DID 키 생성 요청\n{walletToken}
    WALLET -> WALLET: walletToken 검증

    USER -[#Blue]\ WALLET: PIN 입력
    WALLET -> WALLET: PIN 키 생성

    opt 사용자가 원할 경우
        USER -[#Blue]\ WALLET: 지문/안면 인식
        WALLET -> WALLET: BIO 키 생성
    end

    WALLET -> WALLET: 키교환용 키 생성
return OK

CA -> WALLET ++: 사용자 등록 요청\n{walletToken, serverToken}
    WALLET -> WALLET: walletToken 검증

    WALLET -> WALLET: (DidDoc)didDoc \
            \n  = DID Document 생성
    WALLET -> WALLET: (OwnerDidDoc)ownerDidDoc\
            \n  = 개별키서명(didDoc)
    WALLET -> WALLET: (SignedDidDoc)sgdDidDoc = {\
            \n   onwerDidDoc,\
            \n   wallet = 월렛 정보,\
            \n   nonce = nonce 생성\
            \n }
    WALLET -> WALLET: 월렛 서명\
            \n* signAssert(sgdDidDoc)

    WALLET -> TAS ++: 사용자 등록 요청
    rnote right of WALLET #Lavender
        **[M132_REQ : 사용자 등록 요청]**
        body:
            messageId
            txId
            serverToken
            signedDidDoc
    end note
        TAS -> TAS: serverToken 검증

        TAS -> TAS: 서명 검증\
            \n* 월렛 서명 검증\
            \n* 개별키 서명 검증
        
        TAS -> TAS: (InvokedDidDoc)invDidDoc = {\
            \n   didDoc,\
            \n   controller = TAS 정보,\
            \n   nonce = nonce 생성\
            \n }

        TAS -> TAS: Controller 서명\
            \n* signInvoke(invDidDoc)

        TAS -> BC ++: DID 등록 요청\n{invDidDoc}
            BC -> BC: Controller\n서명 검증
            BC -> BC: 등록
        return OK

        TAS -> TAS: 사용자 매핑정보 DB 저장\
                \n* pii (개인식별번호)\
                \n* holderDid (사용자 DID)\
                \n* walletId (월렛 식별자)\
                \n* appId (인가앱 식별자)
        return 사용자 등록 응답
        rnote right of WALLET #Lavender
            **[M132_REQ : 사용자 등록 응답]**
            body:
                txId
        end note
return OK


|||
== P132-5: 사용자 등록 완료  ==
CA -> TAS++: 사용자 등록 완료 요청
rnote right of CA #Lavender        
    **[M132_REQ: 사용자 등록 완료 요청]**
    body:
        messageId
        txId
        serverToken
end note

    TAS -> TAS: serverToken 검증
    TAS -> TAS: 세션정보 삭제 및 거래종료

return 사용자 등록 완료 응답
rnote right of CA #Lavender        
    **[M132_RES: 사용자 등록 완료 응답]**
    body:
        txId
end note

|||
|||
@enduml

