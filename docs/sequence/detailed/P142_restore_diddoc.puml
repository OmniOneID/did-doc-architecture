@startuml P142_restore_diddoc

'- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
' Settings
'- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
'=== Header and Footer ===
header OPEN-DID Technical Specification
footer
  	Page %page% of %lastpage% at %date("yyyy-MM-dd hh:mm:ss")
end footer

'=== Title ===
title
	<size:25>P142 : User DID Document Restore</size>
end title

'=== Options ===
autonumber "<b>(#)</b>"

'=== Panticipants ===
skinparam ParticipantPadding 20
skinparam BoxPadding 20
skinparam MaxMessageSize 500
skinparam MinClassWidth 80

actor "**User**" as USER

box Mobile #OldLace
    participant "**Wallet**" as WALLET <<Wallet>> #WhiteSmoke
    participant "**Certified App**" as CA <<App>> #WhiteSmoke    
end box

box Server #AliceBlue
    participant "**CAS**" as CAS <<WAS>> #WhiteSmoke
end box

box TAS Provider #AliceBlue
    participant "**TAS**" as TAS <<WAS>> #WhiteSmoke
end box

box Trusted Storage
    participant "**blockchain**" as BC <<Storage>> #WhiteSmoke
end box 

'- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
' Constants
'- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
!$refdoc = "Refer to separate document"
!$doc = "Refer to data specification document"

'- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
' Content
'- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
|||

rnote across #white
    TAS must request a DID Document restore offer from the certified app, and during this process, the certified app must obtain an offerId.
    The offer process is not covered in this specification.
end hnote


== P142-1: User DID Document Restore Start Request ==
CA -> TAS++: User DID Document Restore Start Request
rnote right of CA #Lavender        
    **[M142_REQ: User DID Document Restore Start Request]**
    body : 
        messageId
        offerId
        did
end note

    TAS -> TAS: Check if the DID is in a modifiable state
    TAS -> TAS: authNonce = Generate nonce for DID Auth

return User DID Document Restore Start Response
rnote right of CA #Lavender        
    **[M142_RES: User DID Document Restore Start Response]**
    body : 
        txId
        authNonce
end note


|||
== P142-2: ECDH Request  ==
CA -> WALLET: Retrieve DID
return {Holder DID}
CA -> CA: Generate Client Nonce
CA -> CA: Generate DH Key Pair
CA -> CA: Prepare ECDH Request\
            \n* (ReqEcdh)reqEcdh\
            \n   = Create ECDH request

rnote right of CA #MintCream
    **ReqEcdh** : $doc  
    client|clientNonce|curve|publicKey|candidate
end note

opt KeyAgreement Signature ON
    CA -> WALLET ++: Request KeyAgreement Signature\n{reqEcdh}
        WALLET -> WALLET: signKeyAgree(reqEcdh)
        note right
            During the actual call:
            * The certified app provides the hash of the original text and the keyId
            * The wallet responds with only the signature value
        end note
    return {reqEcdh}
    rnote right of WALLET #MintCream
        **signedReqEcdh** : $doc
        client|clientNonce|curve|publicKey|candidate|Proof  
        Proof = KeyAgreeProof
    end note
end



CA -> TAS++ : ECDH Request
rnote right of CA #Lavender
    **[M142_REQ : ECDH Request]**
    body : 
        messageId
        txId
        reqEcdh
end note

    opt KeyAgreement Signature ON
        TAS -> TAS: Verify reqEcdh.proof signature
    end

    TAS -> TAS : Validate reqEcdh format
    TAS -> TAS : Generate Server Nonce
    TAS -> TAS : Generate mergedNonce
    rnote right of TAS #MintCream
        **mergedNonce**
        sha256(serverNonce, clientNonce)
    end note
    TAS -> TAS: Generate DH Key Pair

    TAS -> TAS: Perform ECDH\
                \n* sesKey = Session Key\

    rnote right of TAS #MintCream
        **sesKey**
        ecies(serverPriKey|clientPubKey|mergedNonce|cipherAlg)
    end note
    TAS -> TAS: Generate ECDH Accept Data\
                \n* (AccEcdh)accEcdh
    rnote right of TAS #MintCream
        **accEcdh** : $doc
        server|serverNonce|cipher|publicKey|padding
    end note
    opt KeyAgreement Signature ON
        TAS -> TAS: signKeyAgree(accEcdh)
    end

return ECDH Response
rnote right of CA #Lavender
    **[M142_RES : ECDH Response]**
    body : 
        txId
        accEcdh
end note

opt KeyAgreement Signature ON
    CA -> CA: Verify accEcdh.proof signature
end
CA -> CA : Validate accEcdh format
CA -> CA : Generate mergedNonce
rnote right of CA #MintCream
    **mergedNonce**
    sha256(serverNonce, clientNonce)
end note
CA -> CA: Perform ECDH\n* sesKey = Session Key

rnote right of CA #MintCream
    **sesKey**
    ecies(clientPriKey|serverPubKey|mergedNonce|cipherAlg)
end note

|||
== P142-3: Server Token Generation Request  ==
hnote over CA, WALLET #LimeGreen
    * purpose = "RestoreDid"
    * (SignedWalletInfo)walletInfo = Generate wallet information
    * walletToken = Wallet token
end hnote

== Wallet Token Generation ==

activate CA

CA -> WALLET++ : Request to generate walletTokenSeed {purpose, pkgname, userId}
    WALLET -> WALLET : Generate nonce
    WALLET -> WALLET : Generate walletTokenSeed with expiration
return {walletTokenSeed}
rnote right of WALLET #MintCream
    **walletTokenSeed** : $doc
    walletTokenSeed = 
        (nonce | validUntil | purpose | pkgname | userId)
end note

CA -> CAS : Request WalletTokenData {walletTokenSeed}
CAS -> CAS : Generate WalletTokenData
CAS -> CA : Return WalletTokenData
rnote right of CA #MintCream
    **WalletTokenData** : $doc
    seed | sha_pii | provider | nonce | Proof  
    Proof = sign(seed | sha_pii | provider | nonce, CAS_PriKey)

    CAS: Authorized App Provider (Authorization App Server)
end note

CA -> WALLET++ : Request to generate WalletToken \n{WalletTokenData}
    WALLET -> BC++ : Query CAS DID Document
    rnote right of WALLET #LightGray
        **[API_REQ: DID Document Query Request]**
        did
    end note

    return
    rnote right of WALLET #LightGray
        **[API_RES: DID Document Query Response]**
        DidDoc
    end note
    rnote right of WALLET #MintCream    
        **DidDoc** : $refdoc
    end note

    WALLET -> WALLET : Verify signature
    WALLET -> WALLET : Generate resultNonce (resultNonce)

    WALLET -> WALLET : Generate wallet token {walletToken}
    rnote right of WALLET #MintCream
        **hWalletToken**
        hWalletToken =
            sha256(WalletTokenData | resultNonce)
    end note

    return {resultNonce}
    note right of WALLET : Apply and return resultNonce

    CA -> CA : Generate wallet token {hWalletToken}
    rnote right of CA #MintCream
        **hWalletToken**
        hWalletToken = 
            sha256(ObjWalletTokenData | resultNonce)
    end note

== Request for Signed Wallet Information ==
CA -> WALLET++ : Request signed wallet information {walletToken}
    WALLET -> WALLET : Generate nonce
    WALLET -> WALLET : Sign wallet information\
                \n* (SignedWalletInfo) walletInfo = {\
                \n      walletId,\
                \n      did,\
                \n      nonce,\
                \n      proof\
                \n    }
return {walletInfo}

|||
== Request for Signed App Information ==
rnote across #white
    The authorization app must have already established a session with the authorization app server through login or a similar process.
    However, the details of that process are beyond the scope of this specification.
end note
CA -> CAS++ : Request for signed app information
rnote right of CA #LightGray        
    **[API_REQ: Request for Signed App Information]**
    query:
        appId
end note
    CAS -> CAS : Generate nonce
    CAS -> CAS : Sign app information\
            \n* (AttestedAppInfo) caAppInfo = {\
            \n      appId,\
            \n      provider,\
            \n      nonce,\
            \n      proof\
            \n    }
return Signed App Information Response {caAppInfo}
rnote right of CA #LightGray        
    **[API_RES: Signed App Information Response]**
    body:
        attestedAppInfo
end note

|||
== Server Token Data Generation Request ==

CA -> CA : Generate server token seed\
        \n* (ServerTokenSeed) seed = {\
        \n     purpose = "RestoreDid",\
        \n     walletInfo,\
        \n     caAppInfo\
        \n  }

CA -> TAS++ : Server Token Generation Request
rnote right of CA #Lavender
    **[M142_REQ : Server Token Generation Request]**
    body : 
        messageId
        txId
        seed
end note

    TAS -> TAS: Verify signatures\
            \n* Verify wallet signature\
            \n* Verify certified app provider signature

    TAS -> TAS: Extract information from seed\
            \n* appId = Certified app identifier\
            \n* walletId = Wallet identifier\
            \n* walletDid = Wallet DID\
            \n* walletProviderDid = Wallet provider DID

    TAS -> TAS: Check consistency with registered wallet information

    TAS -> TAS: Generate and store server token\
            \n* Generate (ServerTokenData)std\
            \n* serverToken = sha256(std)

    TAS -> TAS: Encrypt response information\
            \n* iv = Generate IV\
            \n* tmp = enc(std, sesKey, iv)\
            \n* encStd = multibase(tmp)

return Server Token Generation Response
rnote right of CA #Lavender
    **[M142_RES : Server Token Generation Response]**
    body : 
        txId
        iv
        encStd
end note

CA -> CA: Decrypt (omitted) and prepare data\
        \n* Calculate serverToken

|||
== P142-4: User DID Document Restore Request ==

CA -> WALLET ++: User DID Document Restore Request\n{walletToken, serverToken}
    WALLET -> WALLET: Validate walletToken

    WALLET -> WALLET: Prepare DID Auth data\
    \n* (DidAuth)didAuth = {\
    \n     did = Holder DID,\
    \n     authNonce\
    \n  }

    USER -[#Blue]\ WALLET: User authentication
    WALLET -> WALLET: signAuth(didAuth)

    WALLET -> TAS ++: User DID Document Restore Request
    rnote right of WALLET #Lavender
        **[M142_REQ : User DID Document Restore Request]**
        body:
            messageId
            txId
            serverToken
            didAuth
    end note
        TAS -> TAS: Validate serverToken

        TAS -> TAS: Validate DID Auth\
                \n* Verify didAuth.proof\
                \n* Check if authNonce matches

        TAS -> TAS: Validate signatures\
            \n* Verify wallet signature\
            \n* Verify individual key signature
        
        TAS -> BC ++: Request user didDoc
        return didDoc

        TAS -> TAS: Update didDoc state\
            \n* didDoc.deactivated = false

        TAS -> TAS: Check user mapping information in DB\
        \n* holderDid (User DID)\
        \n* walletId (Wallet identifier)\
        \n* appId (Certified app identifier)

        TAS -> TAS: (InvokedDidDoc)invDidDoc = {\
            \n   didDoc,\
            \n   controller = TAS information,\
            \n   nonce = Generate nonce\
            \n }

        TAS -> TAS: Controller signature\
            \n* signInvoke(invDidDoc)

        TAS -> BC ++: DID Update Request\n{invDidDoc}
            BC -> BC: Verify Controller\nsignature
            BC -> BC: Update
        return OK

        return User DID Document Restore Response
        rnote right of WALLET #Lavender
            **[M142_REQ : User DID Document Restore]**
            body:
                txId
        end note
return OK


|||
== P142-5: User DID Document Restore Completion ==
CA -> TAS++: User DID Document Restore Completion Request
rnote right of CA #Lavender        
    **[M142_REQ: User DID Document Restore Completion Request]**
    body:
        messageId
        txId
        serverToken
end note

    TAS -> TAS: Validate serverToken
    TAS -> TAS: Delete session information and end transaction

return User DID Document Restore Completion Response
rnote right of CA #Lavender        
    **[M142_RES: User DID Document Restore Completion Request]**
    body:
        txId
end note

|||
|||
@enduml

